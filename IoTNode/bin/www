#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('IoTNode:server');
var http = require('http');
var net = require('net');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io').listen(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

require('../app/models/StatisticsObject');
var mongoose = require('mongoose');


mongoose.connect('mongodb://localhost/bdd', function (err) {
    if (err) {
        throw err;
    }
});
var statisticsObject = mongoose.model('StatisticsObject');

var counterToSaveInBase = 0;


io.sockets.on('connection', function (socket) {
    console.log("un client est connectÃ©");
});

function connectionToServe(){

    const client = net.connect(42000, '10.75.0.100');

    client.on('connect', () =>{
        console.log('connected to serve');
        client.write('CAPT_JSON_INTERVAL\n');

    });
    client.on('data', (data) => {
        counterToSaveInBase++;
        data = /<start\|(.*?)\|end>/g.exec(data.toString());
        if (data) {
            var values = JSON.parse(data[1]);
            io.sockets.emit('message', {data: values});
        }
        if(counterToSaveInBase>=60){
            counterToSaveInBase = 0;
            statisticsObject(values).save(function(err, save) {
                if (err) return console.error(err);
                console.dir(save);
            });
        }
    });

    client.on('error', function (err) {
        console.log("Connection failed");
        setTimeout(function(){
            connectionToServe()
        }, 10000)
    });

    client.on('end', () => {
        setTimeout(function(){
            connectionToServe()
        }, 10000)
    });
}

connectionToServe();



