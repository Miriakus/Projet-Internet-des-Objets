#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('IoTNode:server');
var http = require('http');
var net = require('net');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io').listen(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
/*var p = new Promise(function (resolve, reject) {
 net.createServer(function (socket) {
 socket.on('data', function (data) {
 var buffer = new Buffer(data);
 console.log(buffer.toString());
 })
 }).listen(5000);
 resolve()
 });

 p.then(function(){
 io.sockets.on('connection', function (socket) {
 console.log("un client est connecté");
 });
 });*/

io.sockets.on('connection', function (socket) {
    console.log("un client est connecté");
});

net.createServer(function (socket) {
    socket.on('data', function (data) {
        var buffer = new Buffer(data);
        io.sockets.emit('message', 'NEW MESSAGE : ' + buffer.toString());
    })
}).listen(5000);

var i = 0;
var interval = setInterval(function () {
    io.sockets.emit('message', {data: [3 *Math.random() , 48 * Math.random(), 5 * Math.random(), 22 * Math.random()]});
    i++;
}, 1000);

